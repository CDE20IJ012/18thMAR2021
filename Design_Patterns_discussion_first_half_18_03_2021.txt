Pattern:- 
* anything that has regularity
* pattern refers to a particular structure 
* a way of doing
* set constraints

Design:

*planning
*process
*approach
*specification
*layout

Design Pattern:- Specification/Approach/Process which we keep on doing on a regular basis.

Design Pattern: A general/common solution to recurring problem.

Gang of Four ( GOF patterns )
-------------------------------------------------------------------------------------------------------------
If we dont go for a design pattern:-
1) Everybody will follow their own approach of writing the code. So different approaches. 
2) Undestanding and readlibility will go on toss.
3) Scalability, testing, modifications 
4) For a single problem there will be multiple solutions
-----------------------------------------------------------------------------------------------------------
When we start talking about design pattern we have 3 parts:-
 * Context/Scenario
 * Problem/Challenge
 * Solution ==========================> Design Pattern
-------------------------------------------------------------------------------------------------------------
* Core Java Design Patterns  ( GOF )
* JEE Design Patterns 
-------------------------------------------------------------------------------------------------------------
https://quadrate-tech.web.app/blog/design-patterns-in-java/




https://www.javatpoint.com/design-patterns-in-java#:~:text=Java%20Design%20Patterns,3)%20Behavioral

Design patterns in java are best practices which are used to resolve some known issues. Design patterns can be divided into 3 different types. Here we have listed down some of the widely used design patterns in Java.

A design patterns are well-proved solution for solving the specific problem/task.
-------------------------------------------------------------------------------------------------------------

But remember one-thing, design patterns are programming language independent strategies for solving the common object-oriented design problems. That means, a design pattern represents an idea, not a particular implementation.

By using the design patterns you can make your code more flexible, reusable and maintainable. It is the most important part because java internally follows design patterns.

Advantage of design pattern:
*They are reusable in multiple projects.
*They provide the solutions that help to define the system architecture.
*They capture the software engineering experiences.
*They provide transparency to the design of an application.
*They are well-proved and testified solutions since they have been built upon the knowledge and experience of expert software developers.
*Design patterns don?t guarantee an absolute solution to a problem. They provide clarity to the system architecture and the possibility of building a better system.
------------------------------------------------------------------------------------------------------
When should we use the design patterns?
We must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).

Design patterns ease the analysis and requirement phase of SDLC by providing information based on prior hands-on experiences.

Categorization of design patterns:
Basically, design patterns are categorized into two parts:

*Core Java (or JSE) Design Patterns.
*JEE Design Patterns.


Core Java Design Patterns

In core java, there are mainly three types of design patterns, which are further divided into their sub-parts:

1.Creational Design Pattern

Creational design patterns are concerned with the way of creating objects. These design patterns are used when a decision must be made at the time of instantiation of a class (i.e. creating an object of a class).

But everyone knows an object is created by using new keyword in java. For example:

StudentRecord s1=new StudentRecord();  
Hard-Coded code is not the good programming approach. Here, we are creating the instance by using the new keyword. Sometimes, the nature of the object must be changed according to the nature of the program. In such cases, we must get the help of creational design patterns to provide more general and flexible approach.


*Factory Pattern
*Abstract Factory Pattern
*Singleton Pattern
*Prototype Pattern
*Builder Pattern.



2. Structural Design Pattern

Structural design patterns are concerned with how classes and objects can be composed, to form larger structures.

The structural design patterns simplifies the structure by identifying the relationships.

These patterns focus on, how the classes inherit from each other and how they are composed from other classes.

*Adapter Pattern
*Bridge Pattern
*Composite Pattern
*Decorator Pattern
*Facade Pattern
*Flyweight Pattern
*Proxy Pattern

3. Behavioral Design Pattern

Behavioral design patterns are concerned with the interaction and responsibility of objects.

In these design patterns,the interaction between the objects should be in such a way that they can easily talk to each other and still should be loosely coupled.

That means the implementation and the client should be loosely coupled in order to avoid hard coding and dependencies.

*Chain Of Responsibility Pattern
*Command Pattern
*Interpreter Pattern
*Iterator Pattern
*Mediator Pattern
*Memento Pattern
*Observer Pattern
*State Pattern
*Strategy Pattern
*Template Pattern
*Visitor Pattern
---------------------------------------------------------------------------------------------------------------
JEE Design patterns

http://www.corej2eepatterns.com/


Presentation Tier

*Intercepting Filter
*Context Object
*Front Controller
*Application Controller
*View Helper
*Composite View
*Dispatcher View
*Service To Worker

--------------------------------------------------------------------------------------------------------
Business Tier

*Business Delegate
*Service Locator
*Session Facade
*Application Service
*Business Object
*Composite Entity
*Transfer Object
*T O Assembler
*Value List Handler
---------------------------------------------------------------------------------------------------------------
Integration Tier

*Data Access Object
*Service Activator
*Domain Store
*Web Service Broker

--------------------------------------------------------------------------------------------------------------
Singleton design pattern in Java

Singleton Pattern says that just "define a class that has only one instance and provides a global point of access to it".

In other words, a class must ensure that only single instance should be created and single object can be used by all other classes.

To follow the Singleton design pattern:-

1) declare a static object.
2) go for private constructor. 
3) For the global access of the object , create a public static method which will create the object and
   return the same.
------------------------------------------------------------------------------  

